---
description: 
globs: *.tsx
alwaysApply: false
---
## Component Style Guidelines

### Component Declaration and Export
1. **Use Arrow Function Components**
   - Components should be declared as arrow functions
   - Use const declarations
   - Export components separately from their declaration
   ```typescript
   // ✅ Preferred
   const MyComponent = () => {
     return (
       <View>
         <Text>Content</Text>
       </View>
     );
   };
   
   export default MyComponent;
   
   // ❌ Avoid
   export default function MyComponent() {
     return (
       <View>
         <Text>Content</Text>
       </View>
     );
   }
   ```

2. **Component File Structure**
   - Imports first (React/RN imports, then third-party, then local)
   - Type/Interface declarations (if any)
   - Component declaration
   - Helper functions/hooks (if any)
   - Export statement last
   ```typescript
   import { View, Text } from 'react-native';
   import { someUtil } from '@/shared/utils';
   
   interface MyComponentProps {
     title: string;
   }
   
   const MyComponent = ({ title }: MyComponentProps) => {
     // Component implementation
   };
   
   export default MyComponent;
   ```

3. **Naming Conventions**
   - Component names should be PascalCase
   - Component files should match the component name
   - Props interfaces should be named `{ComponentName}Props`

4. **Props and Types**
   - Always define prop types using TypeScript types
   - Place types before the component declaration
   - Export prop types if they're used by other components

### Screen Components
1. **Screen Organization**
   - Place screen components in their feature's `screens/` directory
   - Keep Expo Router files (`app/` directory) minimal
   - Pass through screen components from features to Expo Router
   ```typescript
   // ✅ Preferred: Screen in feature directory
   // src/features/home/screens/HomeScreen.tsx
   export const HomeScreen = () => {
     // Screen implementation
   };

   // app/index.tsx
   import { HomeScreen } from "@/features/home/screens/HomeScreen";
   export default HomeScreen;

   // ❌ Avoid: Screen implementation in app directory
   // app/index.tsx
   const HomeScreen = () => {
     // Screen implementation
   };
   export default HomeScreen;
   ```  

### Hook Organization
1. **Co-location with Components**
   - Place hooks in the same directory as the component that uses them
   - Name hooks with the prefix `use` followed by the component name
   ```typescript
   // ✅ Preferred: Hook next to its component
   src/features/followers/components/
   ├── FollowerCard.tsx
   └── useFollowerCard.ts

   // ❌ Avoid: Hooks in separate directory
   src/features/followers/
   ├── components/
   │   └── FollowerCard.tsx
   └── hooks/
       └── useFollowerCard.ts
   ```

2. **Screen Hooks**
   - Place screen hooks in the same directory as the screen
   - Keep screen-specific business logic in the hook
   ```typescript
   src/features/trips/screens/
   ├── TripDetailsScreen.tsx
   └── useTripDetailsScreen.ts
   ```

3. **Hook Scope**
   - Component hooks should only contain logic for their specific component
   - Screen hooks can orchestrate multiple components and manage screen-level state
   - Move shared logic to separate utility hooks when needed
   ```typescript
   // Component-specific hook
   const useFollowerCard = (followerId: string) => {
     // Logic specific to FollowerCard
   };

   // Screen-level hook
   const useFollowersScreen = () => {
     // Screen-wide state and logic
   };

   // Shared logic in utils (only if used by multiple components)
   src/features/followers/utils/
   └── useFollowerStatus.ts
   ```

### Accessibility Guidelines

1. **Required Accessibility Properties**
   - Every interactive element must have:
     ```typescript
     accessibilityRole="button" | "text" | "header" | "link" | etc.
     accessibilityLabel="Clear, concise description"
     accessibilityHint="Additional context when needed"
     ```
   - Dynamic elements must include:
     ```typescript
     accessibilityState={{ disabled: boolean }}
     accessibilityState={{ selected: boolean }}
     ```

2. **Accessibility Roles**
   - Use semantic roles that match the element's purpose:
     - `header` for titles and section headers
     - `button` for pressable elements
     - `text` for non-interactive text
     - `link` for navigation elements
     - `searchbox` for search inputs
     - `textbox` for text inputs

3. **Accessibility Labels**
   - Must be clear and concise
   - Should describe the element's purpose
   - For buttons, use action-oriented labels
   - For inputs, include the expected input type
   Example:
   ```typescript
   // ✅ Good
   accessibilityLabel="Log in"
   accessibilityLabel="Email input"
   
   // ❌ Avoid
   accessibilityLabel="Click here"
   accessibilityLabel="Input field"
   ```

4. **Accessibility Hints**
   - Provide additional context when needed
   - Explain the result of an action
   - Include format requirements for inputs
   Example:
   ```typescript
   accessibilityHint="Enter your email address"
   accessibilityHint="Tap to reset your password"
   ```

### Test ID Guidelines

1. **When to Add Test IDs**
   - Add test IDs only when writing tests
   - Use test IDs for elements that need to be queried in tests
   - Follow a consistent naming pattern:
     ```typescript
     testID="feature-element-purpose"
     ```
   Example:
   ```typescript
   testID="login-button"
   testID="email-input"
   testID="forgot-password-link"
   ```

2. **Test ID Naming Convention**
   - Use kebab-case for test IDs
   - Include the feature name
   - Include the element type
   - Include the purpose if needed
   ```typescript
   // ✅ Good
   testID="login-email-input"
   testID="profile-edit-button"
   
   // ❌ Avoid
   testID="email"
   testID="button1"
   ```

3. **Test ID Scope**
   - Add test IDs to:
     - Interactive elements (buttons, inputs, links)
     - Containers that need to be queried
     - Dynamic content that needs verification
   - Do not add test IDs to:
     - Static text that doesn't need testing
     - Decorative elements
     - Elements that can be queried by accessibility labels

4. **Test ID Maintenance**
   - Remove test IDs when tests are removed
   - Update test IDs when component purpose changes
   - Document test ID dependencies in test files