---
description: 
globs: 
alwaysApply: true
---
# Feature-Based Architecture Guidelines

## Directory Structure

```
src/
  app/              # Expo Router pages and layouts
    (groups)/       # Route grouping
    _layout.tsx     # Layout configuration
  features/           # Main features of the application
    {feature}/        # Each feature has its own directory
      components/     # Feature-specific UI components
      hooks/         # Feature-specific hooks
      screens/      # Feature-owned screen, if it only uses this feature
      tasks/         # Background tasks and long-running operations
      actions.ts    # Business operations that coordinate different parts of the application
      analytics.ts   # Analytics calls relating to the feature
      api.ts         # API calls for this feature
      types.ts       # TypeScript types for this feature
      utils.ts       # Feature-specific utilities
  shared/            # Shared/common code
    components/      # Reusable UI components
    hooks/          # Common hooks
    utils/          # Common utilities
    types/          # Shared TypeScript types
  services/          # Core services
    apiClient.ts    # Base API client configuration
    storage.ts      # Storage service
    firebase.ts     # Firebase setup
```

Note: Navigation is handled through Expo Router's file-based routing system in the `app/` directory. No additional navigation configuration is needed.

## Feature Organization Rules

1. Each feature should be self-contained in its own directory under `src/features/`
2. Features can depend on shared code but should not depend on other features
3. If code is used by multiple features, move it to `shared/`

## Screens

- If a screen is **owned by a single feature** and only uses data/components from that feature, colocate it inside the relevant feature folder.
- If a screen **composes from multiple features**, place it in the `screens/` directory.
- Avoid putting screens in `shared/` â€” that's reserved for UI primitives and utils.

## The tasks directory should be used for:

- Background tasks (like location tracking)
- Periodic tasks (like data synchronization)
- Long-running operations
- Task definitions and handlers

## API Organization

### Feature-specific API (`api.ts`)
- Place all external interactions (e.g. firestore) related to a specific feature in `features/{feature}/api.ts`
- Export an object with methods for each Firestore operation
- Use TypeScript types from the feature's `types.ts`
- Example:
```typescript
// features/trips/api.ts
import { collection, addDoc, query, where, getDocs } from 'firebase/firestore';
import { db } from '@/services/firebase';
import { Trip } from './types';

export const tripsApi = {
  getTrips: async (userId: string) => {
    const tripsRef = collection(db, 'trips');
    const q = query(tripsRef, where('userId', '==', userId));
    const snapshot = await getDocs(q);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })) as Trip[];
  },
  addTrip: async (trip: Omit<Trip, 'id'>) => {
    const tripsRef = collection(db, 'trips');
    const docRef = await addDoc(tripsRef, trip);
    return { id: docRef.id, ...trip };
  }
};
```

### Core Firebase Setup (`services/firebase.ts`)
- Initialize Firebase app
- Configure Firestore
- Set up authentication
- Export initialized services
Example:
```typescript
import { initializeApp } from 'firebase/app';
import { getFirestore } from 'firebase/firestore';
import { getAuth } from 'firebase/auth';

const firebaseConfig = {
  // config values
};

export const app = initializeApp(firebaseConfig);
export const db = getFirestore(app);
export const auth = getAuth(app);
```

## Component Organization

1. Feature-specific components go in `features/{feature}/components/`
2. Shared/reusable components go in `shared/components/`
3. Components should be organized by feature, not by type
4. Keep components focused and single-purpose
5. Components should reuse base and common components where applicable

## State Management

1. **Firestore (Primary)**
   - Server state and data persistence
   - Real-time updates
   - Offline support
   - Data synchronization
   Example:
   ```typescript
   // features/trips/hooks/useTrips.ts
   export const useTrips = (userId: string) => {
     const [trips, setTrips] = useState<Trip[]>([]);
     const [isLoading, setIsLoading] = useState(true);
     const [error, setError] = useState<Error | null>(null);

     useEffect(() => {
       const unsubscribe = onSnapshot(
         query(collection(db, 'trips'), where('userId', '==', userId)),
         (snapshot) => {
           const tripsData = snapshot.docs.map(doc => ({
             id: doc.id,
             ...doc.data()
           })) as Trip[];
           setTrips(tripsData);
           setIsLoading(false);
         }
       );
       return () => unsubscribe();
     }, [userId]);

     return { trips, isLoading, error };
   };
   ```

2. **React State (useState/useContext)**
   - Component-specific UI state
   - Form state
   - Modal states
   - Navigation state
   Example:
   ```typescript
   const [isEditing, setIsEditing] = useState(false);
   const [formData, setFormData] = useState(initialData);
   ```

3. **Zustand (When Needed)**
   - Only use for complex client-side state management
   - Examples of when to use Zustand:
     ```typescript
     // Complex UI state
     interface UIStore {
       selectedTripId: string | null;
       isEditing: boolean;
       sidebarOpen: boolean;
       theme: 'light' | 'dark';
     }

     // Complex derived state
     interface FilteredTripsStore {
       trips: Trip[];
       filters: TripFilters;
       filteredTrips: Trip[];
       sortedTrips: Trip[];
     }

     // Cross-component state
     interface TripPlanningStore {
       selectedTrip: Trip | null;
       selectedDestination: Destination | null;
       mapView: MapView;
       timeline: Timeline;
     }
     ```

4. **State Location Guidelines**
   - Use Firestore for all persistent data
   - Use React state for component-specific UI state
   - Only use Zustand when managing complex client-side state
   - Keep state close to where it's used
   - Consider component composition before reaching for global state

## Testing
New code should be testable and tested.
1. Use jest for unit testing
2. Use React Native Testing Library for component testing
3. Use Maestro for E2E testing

## Code Organization Rules

### Imports
1. Group imports in the following order:
   - External libraries
   - Shared utilities and components
   - Feature-specific imports
   - Types
   - Styles

### File Naming
1. Use PascalCase for component files: `FeatureComponent.tsx`
2. Use camelCase for utility files: `featureUtils.ts`
3. Use kebab-case for style files: `feature-styles.ts`

### Types
1. Prefer types to interfaces
2. Place feature-specific types in `features/{feature}/types.ts`
3. Place shared types in `shared/types/`
4. Use type aliases for unions and utility types

## Best Practices

1. **Feature Independence**
   - Features should be independent and self-contained
   - Minimize dependencies between features
   - Use shared code for cross-feature functionality

2. **Code Organization**
   - Keep files small and focused
   - Maximum 300 lines per file recommended
   - One component per file

3. **State Management**
   - Use Zustand as the primary state management solution
   - Keep state close to where it's used by creating feature-specific stores
   - Use Context only for truly global, rarely-changing state
   - Consider component composition before reaching for global state
   - Split large stores into smaller, feature-specific ones

4. **Testing**
   - Place tests next to the code they test
   - Name test files with `.test.ts` or `.test.tsx` extension
   - Test business logic and complex components

5. **Performance**
   - Lazy load features when possible
   - Use React.memo for expensive components
   - Implement proper error boundaries

## Adding New Features

1. Create a new directory under `src/features/`
2. Include necessary subdirectories (components, hooks, etc.)
3. Create `types.ts` for feature-specific types
4. Create `api.ts` for API calls

## Shared Code Guidelines

1. Code should only be moved to `shared/` if:
   - It's used by multiple features
   - It's truly generic
   - It has no feature-specific dependencies

2. Shared components should:
   - Be highly reusable
   - Accept clear props types
   - Be well documented
   - Be thoroughly tested
