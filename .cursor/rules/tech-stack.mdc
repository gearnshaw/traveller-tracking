---
description: 
globs: 
alwaysApply: true
---
 # Technology Stack Guidelines

> **Important**: All third-party dependencies must be documented in this file.
> - If a dependency is not listed here, it should be flagged for review
> - If an alternative exists in this file, it should be used instead
> - New third-party dependencies must be added here after approval
> This ensures consistent technology choices across the project and prevents duplicate solutions.

##Â Stack

### State Management
- **Firestore** - Primary data storage and real-time state
  - Used for: Data persistence, real-time updates, authentication
  - Documentation: https://firebase.google.com/docs/firestore
  - Key packages:
    - `firebase/app`
    - `firebase/firestore`
    - `firebase/auth`
  - Usage: See `project-architecture.mdc` API Organization section for patterns

- **Zustand** - Client-side state management (when needed)
  - Used for: Complex UI state, derived state, cross-component state
  - Only use when:
    - Managing complex UI state across components
    - Handling derived state that's used in multiple places
    - Managing user preferences
    - Coordinating complex state updates
  - Documentation: https://github.com/pmndrs/zustand

### Data Layer
- **Firebase/Firestore** - Primary data storage
  - Used for: Data persistence, real-time updates, authentication
  - Documentation: https://firebase.google.com/docs/firestore
  - Key packages:
    - `firebase/app`
    - `firebase/firestore`
    - `firebase/auth`
  - Usage: See `project-architecture.mdc` API Organization section for patterns

### UI Framework
- **React Native** with Expo
  - Build system: Expo
  - Navigation: Expo Router

### Styling
- **TWRNC** - Primary styling solution
  - Used for: Component styling using Tailwind CSS utility classes
  - Documentation: https://github.com/jaredh159/tailwind-react-native-classnames
  - Key packages:
    - `twrnc`
  - Best practices:
    - Use `tw` from `@/services/tailwind` for all styling
    - Prefer utility classes over custom styles
    - Use design system tokens from `tailwind.config.js`

### Testing
- **Jest** - Primary testing framework
  - Used for: Unit testing, integration testing, snapshot testing
  - Documentation: https://jestjs.io/
  - Key packages:
    - `jest`
    - `@types/jest`
    - `ts-jest`
  - Configuration: Configured via `jest.config.js`
  - Best practices:
    - Co-locate test files with source code using `.test.ts(x)` extension
    - Use snapshot testing sparingly and only for stable components
    - Mock external dependencies and side effects
    - Follow AAA pattern (Arrange, Act, Assert)

### Analytics
- **Firebase Analytics** - Primary analytics solution
  - Used for: User behavior tracking, screen views, custom events, error monitoring
  - Documentation: https://firebase.google.com/docs/analytics
  - Key packages:
    - `@react-native-firebase/analytics`
  - Usage: Centralized through `analytics` service in `services/analytics.ts`
    - Screen views: `logScreen(screenName, screenClass?)`
    - Custom events: `logEvent(eventName, params?)`
    - User properties: `setUserProperties(properties)`
    - Pre-defined events: Trip creation/updates, auth flows, errors

- **React Native Testing Library** - Component testing
  - Used for: Component integration testing, user interaction testing
  - Documentation: https://callstack.github.io/react-native-testing-library/
  - Key packages:
    - `@testing-library/react-native`
    - `@testing-library/jest-native`
  - Best practices:
    - Test component behavior, not implementation
    - Query elements by accessibility roles and labels
    - Test user interactions using fireEvent
    - Write tests from user's perspective

- **Maestro** - End-to-end testing
  - Used for: Full app integration testing, user flow testing
  - Documentation: https://maestro.mobile.dev/
  - Key features:
    - Flow-based test writing
    - Cross-platform support
    - Visual testing capabilities
    - CI/CD integration
  - Best practices:
    - Focus on critical user journeys
    - Use stable test IDs
    - Keep flows atomic and focused
    - Include setup and teardown steps

## Adding New Dependencies
1. All new dependencies must be:
   - Actively maintained (last release < 6 months)
   - Well documented
   - TypeScript compatible
   - Compatible with Expo if applicable

2. Document new dependencies here including:
   - Purpose/Use case
   - Key packages/imports
   - Link to documentation
   - Any specific configuration requirements

3. Consider the following before adding:
   - Bundle size impact
   - Learning curve for team
   - Long-term maintenance implications
   - Platform compatibility (iOS/Android)
   - Expo compatibility